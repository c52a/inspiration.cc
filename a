--// inf cash n stuff gui
local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'Aиti Production',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

local Tabs = {
    Main = Window:AddTab('main'),
    ['DevTools'] = Window:AddTab('tools'),
    ['UI Settings'] = Window:AddTab('ui'),
}

local MoneyGroup = Tabs.Main:AddLeftGroupbox('Money Generator')

local MoneyToggle = false -- Variable to track toggle state
local waitTime = 0.005 -- Default wait time
local ohString1 = "5000$"
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to start/stop the loop
local function MoneyLoop()
    while MoneyToggle do
        ReplicatedStorage.RemotesS.Reward:FireServer(ohString1)
        task.wait(waitTime) -- Use the adjustable wait time
    end
end

-- Toggle for starting/stopping the money generation
MoneyGroup:AddToggle('MoneyToggle', {
    Text = 'Toggle Gen',
    Default = false,
    Tooltip = 'Toggles the Money Generator',

    Callback = function(Value)
        MoneyToggle = Value -- Update toggle state
        if MoneyToggle then
            task.spawn(MoneyLoop) -- Start the loop in a new thread
        end
    end
})

-- Slider to control wait time
MoneyGroup:AddSlider('MoneyWaitSlider', {
    Text = 'Money Gen Speed',
    Default = 0.005,
    Min = 0.005,
    Max = 5,
    Rounding = 3,
    Compact = false,

    Callback = function(Value)
        waitTime = Value -- Update the wait time dynamically
        print('[cb] MoneyWaitSlider was changed! New value:', Value)
    end
})

local InfoGroup = Tabs.Main:AddRightGroupbox('information(s)')

local ExcLable = InfoGroup:AddLabel('using '..identifyexecutor()..'s UNC')




local ToolGroup = Tabs['DevTools']:AddLeftGroupbox('Tools')


local infinite = ToolGroup:AddButton({
    Text = 'infinite yield',
    Func = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end,
    DoubleClick = false,
    Tooltip = 'infinite yield'
})

local Hydroxide = ToolGroup:AddButton({
    Text = 'Hydroxide',
    Func = function()
        local owner = "Upbolt"
        local branch = "revision"

        local function webImport(file)
            return loadstring(game:HttpGetAsync(("https://raw.githubusercontent.com/%s/Hydroxide/%s/%s.lua"):format(owner, branch, file)), file .. '.lua')()
        end

        webImport("init")
        webImport("ui/main")
    end,
    DoubleClick = false,
    Tooltip = 'Hydroxide'
})


local soonlabel = ToolGroup:AddLabel('more soon')



Library:SetWatermarkVisibility(true)


local FrameTimer = tick()
local FrameCounter = 0;
local FPS = 60;

local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter += 1;

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter;
        FrameTimer = tick();
        FrameCounter = 0;
    end;

    Library:SetWatermark(('Aиti Production | %s fps | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ));
end);


local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
Library.ToggleKeybind = Options.MenuKeybind
-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
ThemeManager:SetFolder('anti')
SaveManager:SetFolder('anti/main')
SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()
